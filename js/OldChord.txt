function oldChord() {
	var graph = {
		Am: ["Am", "Em", "G"],
		C: ["C", "Dm", "F", "G", "G7", "空"],
		Dm: ["Am", "Dm"],
		Em: ["Dm", "Em", "G"],
		F: ["Am", "C", "Em", "F"],
		G: ["C", "Dm", "G"],
		G7: ["C", "Dm", "F", "G7"],
		空: ["C", "G", "Am"]
	};
	graph = {
		Am: ["Am", "Dm", "F", "空"],
		C: ["C", "F", "G", "G7", "空"],
		Dm: ["C", "Dm", "Em", "G", "G7"],
		Em: ["Am", "Em", "F"],
		F: ["C", "F", "G7"],
		G: ["Am", "C", "Em", "G", "空"],
		G7: ["C", "G7"],
		空: ["C"]
	}

	var val = {
		C: [1, 3, 5],
		Dm: [2, 4, 6],
		Em: [3, 5, 7],
		F: [4, 6, 1],
		G: [5, 7, 2],
		Am: [6, 1, 3],
		G7: [5, 7, 2, 4],
		空: [0],
	};
	bars = Music.sections;
	bars.forEach(function (bar, id) {
		bar.data = {};
		for (var i = 0; i <= 7; i++) {
			bar.data[i] = 0;
		}
	});
	bars.forEach(function (bar, id) {
		var clen = 0;
		bar.forEach(function (noteWarp, id) {
			let note = noteWarp.note,
				present = bar.data,
				len = note.length;
			if (clen < Music.lenTempo) {
				present[note.pitch] += 4;
			}
			clen += len;
			present[note.pitch] += note.length;
		});
	});
	bars.forEach(function (bar) {
		var tmp = {};
		for (var i in val) {
			if (!(i in tmp)) {
				tmp[i] = 0;
			}
			val[i].forEach(function (note, id) {
				tmp[i] += (bar.data[note])* (i.indexOf('m') == -1 ? 1 : 1 );
				//tmp[i] += (bar.data[note])* mode2[i];
			});
		}
		bar.data = tmp;
	});
	bars.reverse().forEach(function (bar, id) {
		if (id === 0) {
			bar.data = {
				C: { val: 1, from: null },
				Dm: { val: 0, from: null },
				Em: { val: 0, from: null },
				F: { val: 0, from: null },
				G: { val: 0, from: null },
				Am: { val: 0, from: null },
				G7: { val: 0, from: null },
				空: { val: 0, from: null },
			};
			return;
		}
		var tmp = {};
		var past = bars[id - 1].data;
		var t;
		for (var i in graph) {
			tmp[i] = { val: 0, from: null };
		}
		for (i in graph) {
			graph[i].forEach(function (j) {
				var t = { val: bar.data[i] + past[j].val, from: j };
				if (t.val > tmp[i].val || (t.val == tmp[i].val && Math.random() > 0.5)) {
					tmp[i] = t;
				}
			});
		}
		bar.data = tmp;
	});
	bars.reverse();
	var past = 'C';
	var res = [];
	bars.forEach(function (bar, id) {
		var data = bar.data;
		if (id === 0) {
			for (var i in data) {
				if (data[i].val > data[past].val) {
					past = i;
				}
			}
			res.push(past);
			return;
		}
		res.push(past = bars[id - 1].data[past].from);
	});
	var doms = document.querySelectorAll('.measure');
	res.forEach(function (it, id) {
		var ele = document.createElement('div');
		ele.style.position = 'absolute';
		ele.style.marginTop = '-0.8em';
		ele.innerText = it;
		doms[id].insertBefore(ele, doms[id].firstChild.nextSibling);
	});
};
